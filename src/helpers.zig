const kern = @import("kern.zig");

// in BPF, all the helper calls
//
// Note, these function signatures were created from documentation found in
// '/usr/include/linux/bpf.h'
pub const map_lookup_elem: *const fn (map: *const kern.MapDef, key: ?*const void) ?*void = @ptrFromInt(1);
pub const map_update_elem: *const fn (map: *const kern.MapDef, key: ?*const void, value: ?*const void, flags: u64) c_long = @ptrFromInt(2);
pub const map_delete_elem: *const fn (map: *const kern.MapDef, key: ?*const void) c_long = @ptrFromInt(3);
pub const probe_read: *const fn (dst: ?*void, size: u32, unsafe_ptr: ?*const void) c_long = @ptrFromInt(4);
pub const ktime_get_ns: *const fn () u64 = @ptrFromInt(5);
pub const trace_printk: *const fn (fmt: [*:0]const u8, fmt_size: u32, arg1: u64, arg2: u64, arg3: u64) c_long = @ptrFromInt(6);
pub const get_prandom_u32: *const fn () u32 = @ptrFromInt(7);
pub const get_smp_processor_id: *const fn () u32 = @ptrFromInt(8);
pub const skb_store_bytes: *const fn (skb: *kern.SkBuff, offset: u32, from: ?*const void, len: u32, flags: u64) c_long = @ptrFromInt(9);
pub const l3_csum_replace: *const fn (skb: *kern.SkBuff, offset: u32, from: u64, to: u64, size: u64) c_long = @ptrFromInt(10);
pub const l4_csum_replace: *const fn (skb: *kern.SkBuff, offset: u32, from: u64, to: u64, flags: u64) c_long = @ptrFromInt(11);
pub const tail_call: *const fn (ctx: ?*void, prog_array_map: *const kern.MapDef, index: u32) c_long = @ptrFromInt(12);
pub const clone_redirect: *const fn (skb: *kern.SkBuff, ifindex: u32, flags: u64) c_long = @ptrFromInt(13);
pub const get_current_pid_tgid: *const fn () u64 = @ptrFromInt(14);
pub const get_current_uid_gid: *const fn () u64 = @ptrFromInt(15);
pub const get_current_comm: *const fn (buf: ?*void, size_of_buf: u32) c_long = @ptrFromInt(16);
pub const get_cgroup_classid: *const fn (skb: *kern.SkBuff) u32 = @ptrFromInt(17);
// Note vlan_proto is big endian
pub const skb_vlan_push: *const fn (skb: *kern.SkBuff, vlan_proto: u16, vlan_tci: u16) c_long = @ptrFromInt(18);
pub const skb_vlan_pop: *const fn (skb: *kern.SkBuff) c_long = @ptrFromInt(19);
pub const skb_get_tunnel_key: *const fn (skb: *kern.SkBuff, key: *kern.TunnelKey, size: u32, flags: u64) c_long = @ptrFromInt(20);
pub const skb_set_tunnel_key: *const fn (skb: *kern.SkBuff, key: *kern.TunnelKey, size: u32, flags: u64) c_long = @ptrFromInt(21);
pub const perf_event_read: *const fn (map: *const kern.MapDef, flags: u64) u64 = @ptrFromInt(22);
pub const redirect: *const fn (ifindex: u32, flags: u64) c_long = @ptrFromInt(23);
pub const get_route_realm: *const fn (skb: *kern.SkBuff) u32 = @ptrFromInt(24);
pub const perf_event_output: *const fn (ctx: ?*void, map: *const kern.MapDef, flags: u64, data: ?*void, size: u64) c_long = @ptrFromInt(25);
pub const skb_load_bytes: *const fn (skb: ?*void, offset: u32, to: ?*void, len: u32) c_long = @ptrFromInt(26);
pub const get_stackid: *const fn (ctx: ?*void, map: *const kern.MapDef, flags: u64) c_long = @ptrFromInt(27);
// from and to point to __be32
pub const csum_diff: *const fn (from: *u32, from_size: u32, to: *u32, to_size: u32, seed: u32) i64 = @ptrFromInt(28);
pub const skb_get_tunnel_opt: *const fn (skb: *kern.SkBuff, opt: ?*void, size: u32) c_long = @ptrFromInt(29);
pub const skb_set_tunnel_opt: *const fn (skb: *kern.SkBuff, opt: ?*void, size: u32) c_long = @ptrFromInt(30);
// proto is __be16
pub const skb_change_proto: *const fn (skb: *kern.SkBuff, proto: u16, flags: u64) c_long = @ptrFromInt(31);
pub const skb_change_type: *const fn (skb: *kern.SkBuff, skb_type: u32) c_long = @ptrFromInt(32);
pub const skb_under_cgroup: *const fn (skb: *kern.SkBuff, map: ?*const void, index: u32) c_long = @ptrFromInt(33);
pub const get_hash_recalc: *const fn (skb: *kern.SkBuff) u32 = @ptrFromInt(34);
pub const get_current_task: *const fn () u64 = @ptrFromInt(35);
pub const probe_write_user: *const fn (dst: ?*void, src: ?*const void, len: u32) c_long = @ptrFromInt(36);
pub const current_task_under_cgroup: *const fn (map: *const kern.MapDef, index: u32) c_long = @ptrFromInt(37);
pub const skb_change_tail: *const fn (skb: *kern.SkBuff, len: u32, flags: u64) c_long = @ptrFromInt(38);
pub const skb_pull_data: *const fn (skb: *kern.SkBuff, len: u32) c_long = @ptrFromInt(39);
pub const csum_update: *const fn (skb: *kern.SkBuff, csum: u32) i64 = @ptrFromInt(40);
pub const set_hash_invalid: *const fn (skb: *kern.SkBuff) void = @ptrFromInt(41);
pub const get_numa_node_id: *const fn () c_long = @ptrFromInt(42);
pub const skb_change_head: *const fn (skb: *kern.SkBuff, len: u32, flags: u64) c_long = @ptrFromInt(43);
pub const xdp_adjust_head: *const fn (xdp_md: *kern.XdpMd, delta: c_int) c_long = @ptrFromInt(44);
pub const probe_read_str: *const fn (dst: ?*void, size: u32, unsafe_ptr: ?*const void) c_long = @ptrFromInt(45);
pub const get_socket_cookie: *const fn (ctx: ?*void) u64 = @ptrFromInt(46);
pub const get_socket_uid: *const fn (skb: *kern.SkBuff) u32 = @ptrFromInt(47);
pub const set_hash: *const fn (skb: *kern.SkBuff, hash: u32) c_long = @ptrFromInt(48);
pub const setsockopt: *const fn (bpf_socket: *kern.SockOps, level: c_int, optname: c_int, optval: ?*void, optlen: c_int) c_long = @ptrFromInt(49);
pub const skb_adjust_room: *const fn (skb: *kern.SkBuff, len_diff: i32, mode: u32, flags: u64) c_long = @ptrFromInt(50);
pub const redirect_map: *const fn (map: *const kern.MapDef, key: u32, flags: u64) c_long = @ptrFromInt(51);
pub const sk_redirect_map: *const fn (skb: *kern.SkBuff, map: *const kern.MapDef, key: u32, flags: u64) c_long = @ptrFromInt(52);
pub const sock_map_update: *const fn (skops: *kern.SockOps, map: *const kern.MapDef, key: ?*void, flags: u64) c_long = @ptrFromInt(53);
pub const xdp_adjust_meta: *const fn (xdp_md: *kern.XdpMd, delta: c_int) c_long = @ptrFromInt(54);
pub const perf_event_read_value: *const fn (map: *const kern.MapDef, flags: u64, buf: *kern.PerfEventValue, buf_size: u32) c_long = @ptrFromInt(55);
pub const perf_prog_read_value: *const fn (ctx: *kern.PerfEventData, buf: *kern.PerfEventValue, buf_size: u32) c_long = @ptrFromInt(56);
pub const getsockopt: *const fn (bpf_socket: ?*void, level: c_int, optname: c_int, optval: ?*void, optlen: c_int) c_long = @ptrFromInt(57);
pub const override_return: *const fn (regs: *kern.PtRegs, rc: u64) c_long = @ptrFromInt(58);
pub const sock_ops_cb_flags_set: *const fn (bpf_sock: *kern.SockOps, argval: c_int) c_long = @ptrFromInt(59);
pub const msg_redirect_map: *const fn (msg: *kern.SkMsgMd, map: *const kern.MapDef, key: u32, flags: u64) c_long = @ptrFromInt(60);
pub const msg_apply_bytes: *const fn (msg: *kern.SkMsgMd, bytes: u32) c_long = @ptrFromInt(61);
pub const msg_cork_bytes: *const fn (msg: *kern.SkMsgMd, bytes: u32) c_long = @ptrFromInt(62);
pub const msg_pull_data: *const fn (msg: *kern.SkMsgMd, start: u32, end: u32, flags: u64) c_long = @ptrFromInt(63);
pub const bind: *const fn (ctx: *kern.BpfSockAddr, addr: *kern.SockAddr, addr_len: c_int) c_long = @ptrFromInt(64);
pub const xdp_adjust_tail: *const fn (xdp_md: *kern.XdpMd, delta: c_int) c_long = @ptrFromInt(65);
pub const skb_get_xfrm_state: *const fn (skb: *kern.SkBuff, index: u32, xfrm_state: *kern.XfrmState, size: u32, flags: u64) c_long = @ptrFromInt(66);
pub const get_stack: *const fn (ctx: ?*void, buf: ?*void, size: u32, flags: u64) c_long = @ptrFromInt(67);
pub const skb_load_bytes_relative: *const fn (skb: ?*const void, offset: u32, to: ?*void, len: u32, start_header: u32) c_long = @ptrFromInt(68);
pub const fib_lookup: *const fn (ctx: ?*void, params: *kern.FibLookup, plen: c_int, flags: u32) c_long = @ptrFromInt(69);
pub const sock_hash_update: *const fn (skops: *kern.SockOps, map: *const kern.MapDef, key: ?*void, flags: u64) c_long = @ptrFromInt(70);
pub const msg_redirect_hash: *const fn (msg: *kern.SkMsgMd, map: *const kern.MapDef, key: ?*void, flags: u64) c_long = @ptrFromInt(71);
pub const sk_redirect_hash: *const fn (skb: *kern.SkBuff, map: *const kern.MapDef, key: ?*void, flags: u64) c_long = @ptrFromInt(72);
pub const lwt_push_encap: *const fn (skb: *kern.SkBuff, typ: u32, hdr: ?*void, len: u32) c_long = @ptrFromInt(73);
pub const lwt_seg6_store_bytes: *const fn (skb: *kern.SkBuff, offset: u32, from: ?*const void, len: u32) c_long = @ptrFromInt(74);
pub const lwt_seg6_adjust_srh: *const fn (skb: *kern.SkBuff, offset: u32, delta: i32) c_long = @ptrFromInt(75);
pub const lwt_seg6_action: *const fn (skb: *kern.SkBuff, action: u32, param: ?*void, param_len: u32) c_long = @ptrFromInt(76);
pub const rc_repeat: *const fn (ctx: ?*void) c_long = @ptrFromInt(77);
pub const rc_keydown: *const fn (ctx: ?*void, protocol: u32, scancode: u64, toggle: u32) c_long = @ptrFromInt(78);
pub const skb_cgroup_id: *const fn (skb: *kern.SkBuff) u64 = @ptrFromInt(79);
pub const get_current_cgroup_id: *const fn () u64 = @ptrFromInt(80);
pub const get_local_storage: *const fn (map: ?*void, flags: u64) ?*void = @ptrFromInt(81);
pub const sk_select_reuseport: *const fn (reuse: *kern.SkReusePortMd, map: *const kern.MapDef, key: ?*void, flags: u64) c_long = @ptrFromInt(82);
pub const skb_ancestor_cgroup_id: *const fn (skb: *kern.SkBuff, ancestor_level: c_int) u64 = @ptrFromInt(83);
pub const sk_lookup_tcp: *const fn (ctx: ?*void, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock = @ptrFromInt(84);
pub const sk_lookup_udp: *const fn (ctx: ?*void, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock = @ptrFromInt(85);
pub const sk_release: *const fn (sock: *kern.Sock) c_long = @ptrFromInt(86);
pub const map_push_elem: *const fn (map: *const kern.MapDef, value: ?*const void, flags: u64) c_long = @ptrFromInt(87);
pub const map_pop_elem: *const fn (map: *const kern.MapDef, value: ?*void) c_long = @ptrFromInt(88);
pub const map_peek_elem: *const fn (map: *const kern.MapDef, value: ?*void) c_long = @ptrFromInt(89);
pub const msg_push_data: *const fn (msg: *kern.SkMsgMd, start: u32, len: u32, flags: u64) c_long = @ptrFromInt(90);
pub const msg_pop_data: *const fn (msg: *kern.SkMsgMd, start: u32, len: u32, flags: u64) c_long = @ptrFromInt(91);
pub const rc_pointer_rel: *const fn (ctx: ?*void, rel_x: i32, rel_y: i32) c_long = @ptrFromInt(92);
pub const spin_lock: *const fn (lock: *kern.SpinLock) c_long = @ptrFromInt(93);
pub const spin_unlock: *const fn (lock: *kern.SpinLock) c_long = @ptrFromInt(94);
pub const sk_fullsock: *const fn (sk: *kern.Sock) ?*kern.SkFullSock = @ptrFromInt(95);
pub const tcp_sock: *const fn (sk: *kern.Sock) ?*kern.TcpSock = @ptrFromInt(96);
pub const skb_ecn_set_ce: *const fn (skb: *kern.SkBuff) c_long = @ptrFromInt(97);
pub const get_listener_sock: *const fn (sk: *kern.Sock) ?*kern.Sock = @ptrFromInt(98);
pub const skc_lookup_tcp: *const fn (ctx: ?*void, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock = @ptrFromInt(99);
pub const tcp_check_syncookie: *const fn (sk: *kern.Sock, iph: ?*void, iph_len: u32, th: *kern.TcpHdr, th_len: u32) c_long = @ptrFromInt(100);
pub const sysctl_get_name: *const fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong, flags: u64) c_long = @ptrFromInt(101);
pub const sysctl_get_current_value: *const fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong) c_long = @ptrFromInt(102);
pub const sysctl_get_new_value: *const fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong) c_long = @ptrFromInt(103);
pub const sysctl_set_new_value: *const fn (ctx: *kern.SysCtl, buf: ?*const u8, buf_len: c_ulong) c_long = @ptrFromInt(104);
pub const strtol: *const fn (buf: *const u8, buf_len: c_ulong, flags: u64, res: *c_long) c_long = @ptrFromInt(105);
pub const strtoul: *const fn (buf: *const u8, buf_len: c_ulong, flags: u64, res: *c_ulong) c_long = @ptrFromInt(106);
pub const sk_storage_get: *const fn (map: *const kern.MapDef, sk: *kern.Sock, value: ?*void, flags: u64) ?*void = @ptrFromInt(107);
pub const sk_storage_delete: *const fn (map: *const kern.MapDef, sk: *kern.Sock) c_long = @ptrFromInt(108);
pub const send_signal: *const fn (sig: u32) c_long = @ptrFromInt(109);
pub const tcp_gen_syncookie: *const fn (sk: *kern.Sock, iph: ?*void, iph_len: u32, th: *kern.TcpHdr, th_len: u32) i64 = @ptrFromInt(110);
pub const skb_output: *const fn (ctx: ?*void, map: *const kern.MapDef, flags: u64, data: ?*void, size: u64) c_long = @ptrFromInt(111);
pub const probe_read_user: *const fn (dst: ?*void, size: u32, unsafe_ptr: ?*const void) c_long = @ptrFromInt(112);
pub const probe_read_kernel: *const fn (dst: ?*void, size: u32, unsafe_ptr: ?*const void) c_long = @ptrFromInt(113);
pub const probe_read_user_str: *const fn (dst: ?*void, size: u32, unsafe_ptr: ?*const void) c_long = @ptrFromInt(114);
pub const probe_read_kernel_str: *const fn (dst: ?*void, size: u32, unsafe_ptr: ?*const void) c_long = @ptrFromInt(115);
pub const tcp_send_ack: *const fn (tp: ?*void, rcv_nxt: u32) c_long = @ptrFromInt(116);
pub const send_signal_thread: *const fn (sig: u32) c_long = @ptrFromInt(117);
pub const jiffies64: *const fn () u64 = @ptrFromInt(118);
pub const read_branch_records: *const fn (ctx: *kern.PerfEventData, buf: ?*void, size: u32, flags: u64) c_long = @ptrFromInt(119);
pub const get_ns_current_pid_tgid: *const fn (dev: u64, ino: u64, nsdata: *kern.PidNsInfo, size: u32) c_long = @ptrFromInt(120);
pub const xdp_output: *const fn (ctx: ?*void, map: *const kern.MapDef, flags: u64, data: ?*void, size: u64) c_long = @ptrFromInt(121);
pub const get_netns_cookie: *const fn (ctx: ?*void) u64 = @ptrFromInt(122);
pub const get_current_ancestor_cgroup_id: *const fn (ancestor_level: c_int) u64 = @ptrFromInt(123);
pub const sk_assign: *const fn (skb: *kern.SkBuff, sk: *kern.Sock, flags: u64) c_long = @ptrFromInt(124);
pub const ktime_get_boot_ns: *const fn () u64 = @ptrFromInt(125);
pub const seq_printf: *const fn (m: *kern.SeqFile, fmt: ?*const u8, fmt_size: u32, data: ?*const void, data_len: u32) c_long = @ptrFromInt(126);
pub const seq_write: *const fn (m: *kern.SeqFile, data: ?*const u8, len: u32) c_long = @ptrFromInt(127);
pub const sk_cgroup_id: *const fn (sk: *kern.BpfSock) u64 = @ptrFromInt(128);
pub const sk_ancestor_cgroup_id: *const fn (sk: *kern.BpfSock, ancestor_level: c_long) u64 = @ptrFromInt(129);
pub const ringbuf_output: *const fn (ringbuf: ?*void, data: ?*void, size: u64, flags: u64) ?*void = @ptrFromInt(130);
pub const ringbuf_reserve: *const fn (ringbuf: ?*void, size: u64, flags: u64) ?*void = @ptrFromInt(131);
pub const ringbuf_submit: *const fn (data: ?*void, flags: u64) void = @ptrFromInt(132);
pub const ringbuf_discard: *const fn (data: ?*void, flags: u64) void = @ptrFromInt(133);
pub const ringbuf_query: *const fn (ringbuf: ?*void, flags: u64) u64 = @ptrFromInt(134);
pub const csum_level: *const fn (skb: *kern.SkBuff, level: u64) c_long = @ptrFromInt(134);
pub const skc_to_tcp6_sock: *const fn (sk: ?*void) ?*kern.Tcp6Sock = @ptrFromInt(135);
pub const skc_to_tcp_sock: *const fn (sk: ?*void) ?*kern.TcpSock = @ptrFromInt(136);
pub const skc_to_tcp_timewait_sock: *const fn (sk: ?*void) ?*kern.TcpTimewaitSock = @ptrFromInt(137);
pub const skc_to_tcp_request_sock: *const fn (sk: ?*void) ?*kern.TcpRequestSock = @ptrFromInt(138);
pub const skc_to_udp6_sock: *const fn (sk: ?*void) ?*kern.Udp6Sock = @ptrFromInt(139);
pub const get_task_stack: *const fn (task: ?*void, buf: ?*void, size: u32, flags: u64) c_long = @ptrFromInt(140);
